#pragma once
#include<iostream>
using namespace std;


// 1. Цифровой счетчик, это переменная с ограниченным диапазоном.
// Значение которой сбрасывается, когда ее целочисленное значение достигает определенного максимума
// (например, k принимает значения в диапазоне от 0..100).
// В качестве примера такого счетчика можно привести цифровые часы, счетчик километража.
// Опишите класс такого счетчика.
// Обеспечьте возможность установления максимального и минимального значений,
// увеличения счетчика на 1,
// возвращения текущего значения.

class Counter {
	//private - инкапсуляция, закрыли свойства от внешних методов и классов - единственный доступ через функцию
private: // спецификатор доступа, определяющий могут ли внешние функции видеть их, стоит по умолчанию
	int min_value;
	int max_value;
	int cur_value;

public: // писать обязательно, нет по умолчанию

	// конструктор по умолчанию - это метод, который не принимает никаких аргументов,
	// и называется точно так же как класс
	// конструкторы необходимы для создания массивов классов
	// конструктор - это инициализация свойств объекта при его объявлении
	Counter(); //вместо void Init
	Counter(int n); //параметризованный констуктор - принимающий аргументы
	Counter(int c, int min, int max); //этот конструктор охватывает сразу все параметры

	//mutators or setters
	void setMin(int n); // методы мутаторы или сеттеры - вносят изменения в свойства
	void setMax(int n);
	void Init(int n=0); //метод иницициализации, чтобы по умолчанию n=0, если мы его не укажем

	void increaseValue(); //ничего не принимает, т.к. всегда будет увеличивать на 1 секунду

	//accessors or getters - always returns smth
	int getCurrentValue(); //такие функции называются аксессоры, потому что дают доступ к приватным свойствам класса

};

